#!/usr/bin/env perl

use strict;
use warnings;
use autodie qw(:all);

use DateTime;
use Net::NTPTime;	# Note RT#80122
use Sys::Syslog;
use Config::Abstraction;

# Check for required argument
unless($ARGV[0]) {
	die "Usage: $0 <NTP server>";
}

# Load configuration
my $timezone = 'America/New_York';	# Default
my $timeout = 5;	# In seconds
my $max_retries = 3;

my $config = Config::Abstraction->new();

$timezone = $config->timezone() if($config->timezone());
$timeout = $config->timeout() if($config->timeout());
$max_retries = $config->max_retries() if($config->max_retries());

# Open syslog
openlog('NTPTimeSync', 'pid', 'user');

# Retry logic for fetching UNIX time
my $time;
my $attempts = 0;
while($attempts < $max_retries) {
	eval {
		local $SIG{ALRM} = sub { die 'timeout' };
		# Get UNIX time from NTP server
		alarm($timeout);
		$time = get_unix_time($ARGV[0]);
		alarm(0);
	};
	if ($@) {
		if($@ eq 'timeout') {
			syslog('warning', "Timeout while contacting NTP server");
		} else {
			syslog('warning', "Error contacting NTP server: $@");
		}
		$time = undef;
	}

	if(defined($time) && ($time =~ /^\d+$/)) {
		last;
	}
	$attempts++;
	syslog('warning', "Attempt $attempts failed to retrieve valid time from NTP server");
	sleep(2);	# Wait before retrying
}

if(!defined($time) || ($time !~ /^\d+$/)) {
	syslog('err', 'Failed to retrieve valid time from NTP server');
	die 'Error: Unable to get valid time from NTP server';
}

# Convert to DateTime object
my $dt;
eval {
	$dt = DateTime->from_epoch(epoch => $time, time_zone => $timezone);
};
if($@) {
	syslog('err', "DateTime conversion error: $@");
	die 'Error: Invalid time conversion';
}

# Print current system date
system('date');

# Update system date
my $formatted_time = $dt->strftime('%m%d%H%M%Y.%S');
system("sudo date $formatted_time");

# Close syslog
closelog();

# Log retrieved time
syslog('info', 'Synchronized time: ' . $dt->strftime('%Y-%m-%d %H:%M:%S %Z'));
